/**
 * @author Yafeng Hao, Liran Juan
 */
var xmlTagChrNum = "Chromosome";
var xmlTagStart = "Start";
var xmlTagEnd = "End";
var xmlTagCytobands = "Cbs";
var xmlTagCytoBand = "Cb";
var xmlAttribute_gieStain = "gS";
var xmlTagParameters = "Parameters";
var xmlTagParameter = "Parameter";
var xmlTagOptions = "Options";
var xmlTagFrom = "F";
var xmlTagTo = "T";

var xmlGroupIG = "PersonalGenome";
var xmlParamSample = "Samples";
var xmlTagVariant = "V";
var xmlTagVariants = "Vs";
var xmlTagLetter = "B";
var xmlAttributeId = "id";
var xmlAttributeType = "Y";
var xmlAttributeGenotype = "h";
var xmlAttribute_dbSNPID = "dd";

var xmlTagElement = "E";
var xmlTagElements = "Es";
var xmlTagSubElement = "S";
var subElementTypeBoxValue = "X";
var subElementTypeBandValue = "D";
var subElementTypeLineValue = "L";
var xmlTagDirection = "s";

var trackname = "1000g_p3_hasrel";
var csi = "--"; // Current Selected Individual (id)
var current_chr = "chr21";
var current_start = 33031597;
var current_end = 33041500;

var csv= -1; // Current Selected Variant (index)

var variants = [];
var variants_byid = {};
var functional_v = {};
var functional_vPointer = [];
var compared_individuals = {};
var compare_method = "trioAnalysis";
var genes = [];
var symbols = {};
var css = 0; // Current Selected Symbol (index)
var cssObj = null;
var cst = 0; // Current Selected Transcript (gene index)
var cstObj = null;
var individuals = {};
var ind_ids = []; //sorted individual ids
var families = {};
var chrs = [];
var control_scanning;

function jump() {
	var chr_temp = document.getElementById("chrSelect").value;
	var start_temp = document.getElementById("startInput").value;
	var end_temp = document.getElementById("endInput").value;
	if(chr_temp == undefined || chr_temp == null){
		chr_temp = current_chr;
	}
	if(start_temp == undefined || start_temp == null){
		start_temp = current_start;
	}
	if(end_temp == undefined || end_temp == null){
		end_temp = current_end;
	}
	load_family_genome(chr_temp,start_temp,end_temp);
}

function createXMLHttpRequest() {
	var xmlHttp = null;
	try {
		// Firefox, Opera 8.0+, Safari
		xmlHttp = new XMLHttpRequest();
	} catch (e) {
		// Internet Explorer
		try {
			xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
		} catch (e) {
			xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
		}
	}
	return xmlHttp;
}
var req = createXMLHttpRequest();
var req2 = createXMLHttpRequest(); //for getPedigree
var req3 = createXMLHttpRequest(); //for addPvar
var req4 = createXMLHttpRequest(); //for getDifference f,m vs o
///////////
var req5 = createXMLHttpRequest(); //for getDifference m,o vs f
////////// now is show colorful vars
var req6 = createXMLHttpRequest(); //for getDifference f,o vs m
var req7 = createXMLHttpRequest(); //for getLD

var reqV = createXMLHttpRequest();

var XMLHttpReq7 = createXMLHttpRequest();//for browse jump
var XMLHttpReq8 = createXMLHttpRequest();//for BJW_upStat
var XMLHttpReq10 = createXMLHttpRequest();//for BJW_scan

var querry1 = "action=getChromosomes"; 
req.open("GET","servlet/test.do?"+querry1,false);
req.send(null);
var chrs_temp = req.responseText.replace(/<.*?>/g,"").split(",");
var chrs_map=[];
var total=0;

document.getElementById("chrSelect").innerHTML = "";

for(var idx=0;idx<chrs_temp.length;idx++){
	var chrtemp=chrs_temp[idx].split(":");
	chrs[idx]={};
	chrs[idx].name=chrtemp[0];
	chrs[idx].lengthh=parseInt(chrtemp[1]);
	chrs[idx].from=total+1;
	chrs[idx].to=total+parseInt(chrtemp[1]);
	chrs[idx].bands=[];
	chrs[idx].centromere = 0;
	total=total+parseInt(chrtemp[1]);
	chrs_map[chrtemp[0]]=idx;
	var tempObj = document.createElement("option");
	document.getElementById("chrSelect").appendChild(tempObj);
	tempObj.innerHTML = chrtemp[0];
}

querry1 = "action=refresh&width=850&end="+current_end+"&start="+current_start+"&chr="+current_chr;
req.open("GET","servlet/test.do?"+querry1,false);
req.send(null);

querry1 = "action=initPvar&tracks="+trackname+"&id=NA19685";
req.open("GET","servlet/test.do?"+querry1,false);
req.send(null);

//var R_brd = Raphael("brd_genome", 530, 610);

var R;
var R_height = 870;
var R_width = 650;
var R_top = 80;
var R_left = 30;
var R_right = 100;
var R_bottom = 20;
var R_sremove = null;

function load_vcf(){
	if(document.getElementById("track_name").value!=null && document.getElementById("track_name").value!=""){
		trackname = document.getElementById("track_name").value;
	}
	var link = document.getElementById("vcf_url").value;
	if(link && link!=""){
		var querry = "action=addExIndividuals&tracks=" + trackname + "&links=" + link + "&modes=pack&types=VCF";
		req.open("GET","servlet/test.do?"+querry,false);
		req.send(null);
	}

	var querry = "action=addPedigree&tracks=" + trackname;
	var pedtext = document.getElementById("ped_rec").value;
	if(pedtext && pedtext!=""){
		var form = new FormData();
		form.append("pedigree", pedtext);
		form.append("enctype", "multipart/form-data");
		req.open("POST","servlet/test.do?"+querry,false);
		req.send(form);
	}

	load_individuals();
}

function load_individuals(){
	if(document.getElementById("track_name").value==null || document.getElementById("track_name").value==""){
		if(trackname != null && trackname != ""){
			document.getElementById("track_name").value = trackname;
		}else{
			return;
		}
	}
	req2.onreadystatechange = plan_pedigree;
	individuals = {};
	compared_individuals = {};
	families = {};
	compare_method = "trioAnalysis";
	var querry = "action=getPedigree&tracks=" + trackname;
	document.getElementById("pedplot").innerHTML="";   
	req2.open("GET","servlet/test.do?"+querry,true);
	req2.send(null);
}

function load_family_genome(chr,start,end){
	if(end - start > 3000000){
		alert("Outside the scope");
		return;
	}
	if(individuals[csi] == undefined || individuals[csi] == null){
		alert("Please select an available individual.");
		return;
	}
	if(chr != current_chr || start != current_start || current_end != current_end){
		var querry = "action=refresh&width=850&chr="+chr+"&start="+start+"&end="+end;
		req.open("GET","servlet/test.do?"+querry,false);
		req.send(null);
	
		current_chr = req.responseXML.getElementsByTagName(xmlTagChrNum)[0].childNodes[0].nodeValue;
		current_start = parseInt(req.responseXML.getElementsByTagName(xmlTagStart)[0].childNodes[0].nodeValue);
		current_end = parseInt(req.responseXML.getElementsByTagName(xmlTagEnd)[0].childNodes[0].nodeValue);
	}

	document.getElementById("brwplot").innerHTML = "";
	R = Raphael("brwplot",R_width+100,R_height);
	R_sremove = spinner(R);
	show_axis();
	show_navigator();
	
	req3.onreadystatechange = show_vars;
	querry = "action=addPvar&tracks="+trackname+"&modes=pack&id="+csi;
	req3.open("GET","servlet/test.do?"+querry,true);
	req3.send(null);
}

function setTabb(name){
	if(name=="pedtree"){
		document.getElementById("pedtree_li").className="hover";
		document.getElementById("indlist_li").className="";
		document.getElementById("pedtree").style.display="block";
		document.getElementById("indlist").style.display="none";
	} else if (name=="indlist"){
		document.getElementById("pedtree_li").className="";
		document.getElementById("indlist_li").className="hover";
		document.getElementById("pedtree").style.display="none";
		document.getElementById("indlist").style.display="block";
	} else if (name=="varlist"){
		document.getElementById("brdview_li").className="";
		document.getElementById("brwview_li").className="";
		document.getElementById("varlist_li").className="hover";
		document.getElementById("brdview").style.display="none";
		document.getElementById("brwview").style.display="none";
		document.getElementById("varlist").style.display="block";
	} else if (name=="brdview"){
		document.getElementById("brdview_li").className="hover";
		document.getElementById("brwview_li").className="";
		document.getElementById("varlist_li").className="";
		document.getElementById("brdview").style.display="block";
		document.getElementById("brwview").style.display="none";
		document.getElementById("varlist").style.display="none";
	//	Rbrd_sremove = spinner(R_brd);
		if(document.getElementById("brd_genome").innerHTML == ""){
			loadChrBand();
		}
	//	Rbrd_sremove();
	} else if (name=="brwview"){
		document.getElementById("brdview_li").className="";
		document.getElementById("brwview_li").className="hover";
		document.getElementById("varlist_li").className="";
		document.getElementById("brdview").style.display="none";
		document.getElementById("brwview").style.display="block";
		document.getElementById("varlist").style.display="none";
	}
}
function close_shared_different(){
	document.getElementById("SD_window").style.display = "none";
}
function call_shared_different(){
	var topp = $("#brwplot").position().top + R_top;
	var leftt = $("#brwplot").position().left + R_left + (R_width-R_left-R_right)/2 + 10;
	$(document.getElementById("SD_window")).css("display","block");
	$(document.getElementById("SD_window")).css("top",topp);
	$(document.getElementById("SD_window")).css("left",leftt);
	document.getElementById("shared_different").innerHTML = "";
	var temp = document.createElement("table");
	document.getElementById("shared_different").appendChild(temp);
	temp.className = "listt_table";
	temp.id = "share_diff_table";

	var temp_tr = temp.insertRow(-1);
	temp_tr.innerHTML = 
		"<th rowspan=\"2\">Highlight</th>"+
		"<th></th>"+
		"<th>shared</th>"+
		"<th rowspan=\"2\">variants with:</th>";
	var radioObj = document.createElement("input");
	temp_tr.cells[1].appendChild(radioObj);
	radioObj.type = "radio";
	radioObj.name = "share_diff_select";
	radioObj.id = "getIntersection_select";
	if(compare_method == "getIntersection"){
		radioObj.checked = true;
	}
	radioObj.onclick = function(event){
		var target = event.target || event.srcElement;
		var id = target.getAttribute("id").split("_")[0];
		compare_method = id;
	}

	temp_tr = temp.insertRow(-1);
	temp_tr.innerHTML =
		"<th></th>"+
		"<th>different</th>";
	radioObj = document.createElement("input");
	temp_tr.cells[0].appendChild(radioObj);
	radioObj.type = "radio";
	radioObj.name = "share_diff_select";
	radioObj.id = "getDifference_select";
	if(compare_method == "getDifference"){
		radioObj.checked = true;
	}
	radioObj.onclick = function(event){
		var target = event.target || event.srcElement;
		var id = target.getAttribute("id").split("_")[0];
		compare_method = id;
	}

	for(var i = 0 ; i < ind_ids.length ; i++){
		var id = ind_ids[i];
		if(id == csi){
			continue;
		}
		temp_tr = temp.insertRow(-1);
		temp_tr.innerHTML = "<td colspan=\"3\"></td><td></td>";
		temp_tr.cells[0].innerHTML = id;
		var checkboxObj = document.createElement("input");
		temp_tr.cells[1].appendChild(checkboxObj);
		checkboxObj.type = "checkbox";
		checkboxObj.name = "share_diff_indlist";
		checkboxObj.id = id+"__shared_diff_indlist";
		checkboxObj.value = id;
		if(compared_individuals[id] != undefined){
			checkboxObj.checked = true;
		}
		checkboxObj.onclick = function(event){
			var bol = $("input[type=checkbox][name=share_diff_indlist]:checked").length >= 9;
			$("input[type=checkbox][name=share_diff_indlist]").not(":checked").attr("disabled",bol);
			var target = event.target || event.srcElement;
			if(compared_individuals[target.getAttribute("id").split("__")[0]] != undefined){
				delete compared_individuals[target.getAttribute("id").split("__")[0]];
			}else{
				compared_individuals[target.getAttribute("id").split("__")[0]] = 1;
			}
		}
	}
	var bol = $("input[type=checkbox][name=share_diff_indlist]:checked").length >= 9;
	$("input[type=checkbox][name=share_diff_indlist]").not(":checked").attr("disabled",bol);
}

function show_example(){
	document.getElementById("track_name").value = "trio_example";
	document.getElementById("vcf_url").value = "http://202.118.228.68/gbfiles/NA12878.trio.snp.vcf.gz";
	document.getElementById("ped_rec").value = "trio NA12878 NA12891 NA12892 2 2\ntrio NA12891 0 0 1 2\ntrio NA12892 0 0 2 2";
}

function spinner(S){
	var sectorsCount = 10,
	    color = "#000",
	    width = 5,
	    r1 = 10,
	    r2 = 20,
	    cx = r2 + width,
	    cy = r2 + width,
	    sectors = [],
	    opacity = [],
	    beta = 2 * Math.PI / sectorsCount,
	    pathParams = {stroke: color, "stroke-width": width, "stroke-linecap": "round"};
	Raphael.getColor.reset();
	for (var i = 0; i < sectorsCount; i++) {
	    var alpha = beta * i - Math.PI / 2,
	   	 cos = Math.cos(alpha),
	   	 sin = Math.sin(alpha);
	    opacity[i] = 1 / sectorsCount * i;
	    sectors[i] = S.path([["M", cx + r1 * cos, cy + r1 * sin], ["L", cx + r2 * cos, cy + r2 * sin]]).attr(pathParams);
	    if (color == "rainbow") {
			sectors[i].attr("stroke", Raphael.getColor());
	    }
	}
	var tick;
	(function ticker() {
	     opacity.unshift(opacity.pop());
	     for (var i = 0; i < sectorsCount; i++) {
			sectors[i].attr("opacity", opacity[i]);
	     }
	     S.safari();
	     tick = setTimeout(ticker, 1000 / sectorsCount);
	 })();
	return function () {
	    clearTimeout(tick);
	    for (var i = 0; i < sectorsCount; i++) {
	    	sectors[i].hide();
		}
	}; 
}
function sortNumber (a,b) {
	return a - b;
}
